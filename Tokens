// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// ERC-721: Component Digital Twin NFT
contract ComponentDigitalTwin is ERC721URIStorage, Ownable {
    uint256 private _nextTokenId;

    constructor() ERC721("ComponentDigitalTwin", "CDT") Ownable(msg.sender) {}

    function mintComponent(address to, string memory metadataURI) public onlyOwner returns (uint256) {
        uint256 tokenId = _nextTokenId++;
        _mint(to, tokenId);
        _setTokenURI(tokenId, metadataURI);
        return tokenId;
    }

    function updateMetadata(uint256 tokenId, string memory newMetadataURI) public onlyOwner {
        require(ownerOf(tokenId) != address(0), "Token does not exist"); // Fixed existence check
        _setTokenURI(tokenId, newMetadataURI);
    }
}

// ERC-20: Aerospace Supply Token (AST)
contract AerospaceSupplyToken is ERC20, Ownable {
    mapping(address => uint256) public stakes;

    constructor() ERC20("Aerospace Supply Token", "AST") Ownable(msg.sender) {
        _mint(msg.sender, 1000000 * 10 ** decimals()); // Initial supply
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function stakeTokens(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        stakes[msg.sender] += amount;
        _burn(msg.sender, amount);
    }
}
